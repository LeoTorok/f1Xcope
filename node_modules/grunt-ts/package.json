{
  "author": {
    "name": "basarat"
  },
  "name": "grunt-ts",
  "description": "Compile and manage your complete typescript workflow",
  "version": "0.9.2",
  "homepage": "https://github.com/basarat/grunt-ts",
  "repository": {
    "type": "git",
    "url": "git@github.com:basarat/grunt-ts.git"
  },
  "bugs": {
    "url": "https://github.com/basarat/grunt-ts/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/basarat/grunt-ts/blob/master/LICENSE"
    }
  ],
  "main": "grunt.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "grunt": "~0.4.0",
    "typescript": "0.9.1",
    "grunt-lib-contrib": "0.5.2",
    "shelljs": "0.1.4",
    "chokidar": "0.6.2",
    "underscore": "1.5.1",
    "underscore.string": "2.3.3"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "typescript": "0.9.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "shelljs": "0.1.4",
    "matchdep": "0.1.1"
  },
  "optionalDependencies": {},
  "keywords": [
    "gruntplugin",
    "typescript"
  ],
  "readme": "grunt-ts\r\n================\r\nWritten from scratch TypeScript compiler task for GruntJS. \r\n\r\nIt differs from grunt-typescript and grunt-type in *two key ways*: \r\n\r\n- This is written in TypeScript.\r\n- Always stays updated to the latest stable release of TypesScript because:\r\n - It simply uses tsc on the commandline.\r\n - Super short and clear typescript code. \r\n\r\nCheck out the complete code: https://github.com/basarat/grunt-ts/blob/master/tasks/ts.ts \r\n\r\nFollowing are some key features: \r\n======================\r\n\r\n###Compiler support \r\nSupports all important compiler flags: \r\n\r\n- es3/es5\r\n- commonjs/amd\r\n- sourcemaps\r\n- declaration\r\n- comments\r\n- nolib \r\n \r\nCan also do js *file concatenation* using `--out`\r\n\r\n\r\n###Reference file generation \r\nCan generate a reference.ts file for you which contains a reference to all your ts files.\r\nThis means you never need to cross reference files manually. Just reference `reference.ts` :) \r\n\r\n###Live file watching and building\r\nCan watch a directory for you and recompile your typescript files when any typescript file changes, gets added, gets removed. \r\nThis makes sure your project is always build ready :) \r\n\r\nnpm install\r\n======================\r\n\r\nThe npm package is available here : https://npmjs.org/package/grunt-ts\r\n\r\n## Configuration Documentation\r\nAfter you have grunt installed, you can install `grunt-ts` first:\r\n\r\n    npm install grunt-ts\r\n\r\nThen modify your `grunt.js` file by adding the following line:\r\n\r\n    grunt.loadNpmTasks('grunt-ts');\r\n\r\nThen add some configuration for the plugin like so:\r\n\r\n    grunt.initConfig({\r\n        ...\r\n        ts: {\r\n            options: {                    // use to override the default options, http://gruntjs.com/configuring-tasks#options\r\n                target: 'es3',            // es3 (default) / or es5\r\n                module: 'commonjs',       // amd , commonjs (default)\r\n                sourcemap: true,          // true  (default) | false\r\n                declaration: false,       // true | false  (default)\r\n                nolib: false,             // true | false (default)\r\n                comments: false           // true | false (default)\r\n            },\r\n            dev: {                          // a particular target   \r\n                src: [\"test/work/**/*.ts\"], // The source typescript files, http://gruntjs.com/configuring-tasks#files\r\n                reference: \"./test/reference.ts\",  // If specified, generate this file that you can use for your reference management\r\n                out: 'test/out.js',         // If specified, generate an out.js file which is the merged js file     \r\n                watch: 'test',              // If specified, configures this target to watch the specified director for ts changes and reruns itself.\r\n                options: {                  // override the main options, http://gruntjs.com/configuring-tasks#options\r\n                    sourcemap: true,\r\n                    declaration: true\r\n                },\r\n            },\r\n            build: {                        // another target \r\n                src: [\"test/fail/*.ts\"],\r\n                options: {                  // overide the main options for this target \r\n                    sourcemap: false,\r\n                }\r\n            },\r\n        },\r\n        ...\r\n    });\r\n    \r\nYou can see a sample grunt file here : https://github.com/basarat/grunt-ts/blob/master/Gruntfile.js\r\n   \r\n### Different configurations per target   \r\nConfiguration options are per target. You can see how you can have one set of default options and then override\r\nthese selectively for a target (e.g `build` , `dev`, `staging` etc).\r\nThis is provided by grunt : http://gruntjs.com/configuring-tasks#options\r\n\r\n### Awesome file globs\r\nYou can do pretty fancy stuff with your src file selection. \r\nAgain provided by grunt : http://gruntjs.com/configuring-tasks#files\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-ts@0.9.2",
  "dist": {
    "shasum": "5d621f638842d6d6469d75fbc7ffc796ed69457f"
  },
  "_from": "grunt-ts@0.9.2",
  "_resolved": "https://registry.npmjs.org/grunt-ts/-/grunt-ts-0.9.2.tgz"
}
